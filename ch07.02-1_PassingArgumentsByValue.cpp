// ch07.02-1_PassingArgumentsByValue.cpp
// call by value
// 값에 의한 전달
//
// 함수의 매개변수로 인수를 전달하는 여러 가지 방법 중에서 가장 이해하기 쉽고 편리한
// 값에 의한 인수 전달을 살펴 보자.
// 함수를 호출하는 입장에서 봤을 때는, 값에 의한 호출 call by value 가 된다.
//

#include <iostream>
using namespace std;

void doSomething(int y) // int y가 매개변수로 정의됨. 들어오는 Y의 값에 따라 결과 달라짐.
{
    cout << "In func " << y << " " << &y << endl;
}

int main()
{
    doSomething(5);     // 이 함수를 호출하면, 리터럴 값 5, 하나가 함수 int y에 복사된다.
    // 위 doSomething()이라는 함수를 호출할 때, 매개변수로 5라는 값이 전달돼야 하는 상황이다.
    // 그러면 doSomething()이라는 함수가 실행이 되면서, 내부적으로 int y가 선언이 되고,
    // y 변수의 메모리에 5라는 값이 복사가 돼서, 초기화가 된다.
    // 내부적으로 이러한 절차가 거쳐진다. Python에서는 이러한 절차를 감춰 두고 있다.
    // c++에서 이러한 사항을 숙지해 놓으면 Python에서의 주의 사항이 눈에 더 잘 들어온다.
    // 여기에서는 값이 전달되는 경우에 대해 언급했다.

    // 조금 혼란스러운 경우가 아래와 같이 변수를 사용할 때다.
    // 이 변수를 사용할 때는 뒤에 참조에 의한 전달, 주소에 의한 전달에서 더 자세하게 다룬다.

    int x = 6;

    cout << "In main " << x << " " << &x << endl;

    // 일단 값에 의한 전달에서는,

    doSomething(x);         // 여기에서 함수에 전달되는 것은 x라는 변수가 아니라,
                            // x에 들어 있는 value 6, 값만 전달이 된다.
                            // 6이라는 값이 argument로서 parameter로 전달되는 것이다.
    // x가 그냥 들어가는 것 아니냐고 할 수 있다.
    // 다른 언어를 먼저 배웠다면 이런 것이 헤깔릴 수가 있다.
    // 뒷 부분 강의를 들어 보면 명확하게 이해가 갈 것이다.
    // 가장 쉽게 알 수 있는 근거는 주소를 찍어 보면 된다.
    // 위에서 x라는 변수의 주소를 찍어 보고,
    // 위 함수 안에도 매개변수의 주소를 출력하고 있다.
    // 만약 함수에 x가 그대로 들어간 것이라면, In main의 x와 함수의 x는 같은 주소라야 한다.

    doSomething(x + 1);     // 이렇게 x + 1을 해 주면 변수 자체가 전달이 될 수 없다.
                            // x + 1을 다른 변수에 넣겠다거나 매개변수화 하겠다는 등의
                            // 아무런 작업도 하고 있지 않다.
                            // 그러므로 6 + 1, 7이라는 숫자를 매개변수에 전달할 수밖에 없다.
                            // 그럼 7이라는 숫자가 y 변수에 선언이 되면서, 복사해서 초기화됨

    // 결괏값
    /*
    In func 5 006FFA88  <- y의 주소
    In main 6 006FFB5C  <- main의 x 주소
    In func 6 006FFA88
    In func 7 006FFA88
    */

    // '값이 전달된다'를 강조하고 있다.
    // 장단점이 있다.
    // 함수의 매개변수 y와 main()의 x의 주소가 다르기 때문에,
    // doSomething() 함수 안에서 무슨 짓을 하더라도 밖에 영향을 줄 수가 없다.
    // 코드가 복잡해지면 함수는 자기 일만 하는 것이 제일 깔끔하다.
    // 하지만 어떤 때는 함수가 외부에 많은 영향을 주기를 원할 때도 있다.
    // 그래서 복잡한 경우가 생기는데 다음 강의에서 설명한다.
    // 위에서처럼 값에 의한 전달을 할 때는, 좀 편하다. 외부에 영향을 끼치지 않는다.
    // 매개변수 y가 함수 안에서만 있고, 함수 끝나고 사라지기 때문에, 깔끔하게 정리돼 있다.
    // 단점은 장점이 그대로 단점이 될 수 있다.
    // 이후의 참조에 의한 전달, 주소에 의한 전달을 보면,
    // 이런 면이 불편할 수도 있겠구나를 알게 된다.
    // 다음 강의를 준비하는 측면에서 값에 의한 전달을 살펴 봤다.

    return 0;
}
