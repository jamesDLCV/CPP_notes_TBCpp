// ch06.20-1_stdArray.cpp
// std::array 소개
// 지금까지 배열을 사용할 때 많이 불편했다.
// 여러 가지 반복되는 코딩도 좀 지겹고,
// 함수 parameter로 넣었을 때, 포인터로 강제 변환돼서 사이즈가 날아가 버린다는 등,
// 많이 불편했다.
// 이러한 불편함들을 모두 해소하고 편하게 사용할 수 있도록 구현한 것이
// std에 들어 있는 array이다.


#include <iostream>
#include <array>        // std::array<int, 5> my_arr
using namespace std;

int main()
{
    int arr[5] = { 1, 2, 3, 4, 5 };   // 이런 식으로 했다.
                                      // 변수 명을 array로는 하지 않는 게 좋다.

    std::array<int, 5> my_arr = { 1, 2, 3, 4, 5 };   // 똑같이 작동한다.

    array<int, 5> my_arr1 = { 1, 2, 3, 4, 5 };       // <- 이렇게 써도 된다.

    // array를 위와 같이 쓰는 게 편하지만, <int, 5>와 같이 숫자가 꼭 들어와야 한다.
    // 숫자를 꼭 넣어 줘야 한다는 것 외에 array로 되는 건 다 된다.
    // int arr[] = { 1, 2, 3, 4, 5 };와 같이 []에 숫자를 안 넣어도 됐다. 넣어도 좋다.

    // 함수 parameter로 넘길 때는 std::array를 쓰는 게 훨씬 편하다.
    // 클래스로 사용자 정의 데이터 형으로 한 번 더 감싸 주면 된다.
    // 클래스를 배우고 난 후 다시 array를 들여다 보면, 아! 이런 거구나. 나도 짤 수 있겠다.
    // 이런 생각이 들 것이다.

    array<int, 5> my_arr2 = { 1, 2, 3, 4, 5 };
    my_arr2 = { 0, 1, 2, 3, 4 };
    my_arr2 = { 0, 1 };                 // 개수가 적으면 상관 없다. 나머지는 0으로 채움.
    //my_arr2 = { 0, 1, 2, 3, 4, 5 };   <- 안 된다. 개수가 6개로 하나가 더 많아서 안 됨.


    cout << my_arr2[4] << endl;         // 0, index 4까지 된다. index 5는 없다. 에러.
    cout << my_arr2[0] << endl;         // 0
    cout << my_arr2.at(0) << endl;      // 0, 이렇게 해도 똑같이 작동한다.
                                        // 대괄호가 아니고 소괄호다.
    cout << endl;

    /*
    cout << my_arr2[10] << endl;         // 미리 체크 없이 무조건 access
    cout << my_arr2.at(10) << endl;      // 미리 체크 후 access

    // at이 함수 이름이다. member function 이름이다.
    // my_arr2[10]은 몇 개가 들어갈 수 있는지 체크도 안 하고 무조건 access해 본다.
    // my_arr2.at(10)은 미리 체크를 해 보고, 문제가 생기면, 예외 처리를 발동시킨다.
    // 예외 처리는 강의 뒤에서 설명한다.
    // 중간에 경계를 한 번 검사를 하니까, 아무래도 좀 더 느리다.
    // 퍼포먼스가 아주 중요한 프로그램을 만들 때는 my_arr2[10]을 써야 한다.
    */

    // 몇 가지 편리한 기능들이 있다.
    // 원소가 몇 개인지 체크를 할 수 있다.

    cout << my_arr2.size() << endl;     // 5, 사이즈는 다섯 개다.

    // 함수 parameter로 보낼 때도 원래 성질이 그대로 유지된다.
    // ch06.20-2_stdArray.cpp에서 함수로 예제를 든다.



    return 0;
}
