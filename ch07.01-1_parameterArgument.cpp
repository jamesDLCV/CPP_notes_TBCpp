// ch07.01-1_parameterArgument.cpp
//
// 큰 프로그램을 만들 때 함수를 잘 사용하는 것은 중요하다.
// 여기에서는 함수를 정확하게 이해하기 위해서,
// parameter (매개변수)와 argument (인자) 두 용어를 정확하게 구분 짓고 넘어가겠다.
//

#include <iostream>
using namespace std;

int foo(int x, int y);  // 여기 foo라는 함수는 prototype이 적혀 있다.
                        // 정수형 x가 foo 함수의 parameter 매개변수이고,
                        // 정수형 y 또한 foo 함수의 parameter이다
                        // 라고 선언을 해 준 것이다.
                        // return type은 int라는 뜻이다.

int foo(int x, int y)   // body가 정의가 돼 있다.
{
    return x + y;       // 코드를 보면, return하는 값, 함수 foo의 출력이
                        // 매개변수 x와 y에 들어 있는 값에 따라 달라진다는 것을 알 수 있다.
                        // 이 매개변수라는 것은, 함수가 어떤 기능을 하는지를 조절해 주는,
                        // 바꿔 주는 기능을 한다.
                        // 수학에서 말하는 매개변수와 거의 비슷한 기능을 한다.
                        // 주의해야 할 것은, 함수의 int x, int y를 보면
                        // 변수가 선언되는 것과 거의 비슷한 형태를 하고 있다.
                        // 그래서 x와 y의 메모리는 함수가 끝남과 동시에 os로 반납이 된다.
                        // 변수가 사라진다. <- 지역 변수인 것이다.
                        // int x, int y는 변수의 영역이 중괄호 안에 있는 것처럼 작동한다.
}   // x and y are destroyed here <- 함수가 끝나면 x와 y는 os로 반납이 된다.


int main()
{
    int x = 1, y = 2;

    foo(6, 7);          // 6, 7이 arguments (actual parameters)이다.
                        // x와 y의 값을 사용하지 않고 직접 값을 넣어도 함수는 작동한다.
                        // 왜냐하면, 함수 foo가 작동을 하기 위해서 필요한 것은,
                        // x라는 변수와 y라는 변수에 들어온 값이다.
                        // 이때, 6과 7과 값은 값을 arguments (인자)라고 한다.
                        // 실매개변수, 실인수라고 번역을 하기도 한다.
                        // 통용되는 용어니까 바꿔서 사용해도 문제가 없다.

    foo(x, y + 1);      // 이렇게 x라는 변수를 직접 여기(함수 foo)에 넣어 줄 수도 있다.
                        // 이때 이 foo라는 함수에서는 위 int x = 1의 1이라는 값을 받아서
                        // 전달해 주게 된다. x에 들어 있는 1이 argument가 되고
                        // 저 위 body가 정의된 함수의 매개변수 int x에 전달이 된다.
                        // 여기서 주의해야 할 것은, 항상 여기에 있는 x의 값만
                        // 전달이 되는 것은 아니다.
                        // 이어지는 강의에서, 값에 의한 전달, 참조에 의한 전달,
                        // 주소에 의한 전달 세 가지를 설명할 것이다.
                        // f(x, y + 1);의 y + 1에서는 2에다가 1을 더하니까 3이다.
                        // 이 경우에는 3이라는 값이 argument고 이 argument가 함수 foo의
                        // parameter int y로 전환이 되는 것이다. 이때 내부적으로 int y가
                        // 선언이 되고, 초기화되면서 y + 1에서 전달해 준 3이란 값이
                        // 함수 foo의 int y에 복사가 돼서 들어간다.
                        // 이건 아주 간단한 경우를 예로 든 것이다.

    // 이어지는 강의에서는, arguments와 parameters들이 여러 가지 복잡한 조합을 갖는 경우를
    // 계속 살펴 볼 것이다.

    // 매개변수와 인자라는 용어를 구분해서 설명을 했다.
    // 이어지는 강의에서 이 두 가지가 각기 다른 경우에 대해서 설명을 할 것이다.
    // 코딩할 때 편하게 쓸 수 있지만, 잘못하면, 큰 오류로 번질 수 있는 경우에 대해서
    // 집중적으로 살펴 보겠다.

    return 0;
}
